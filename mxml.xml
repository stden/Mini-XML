<?xml version="1.0"?>
<function name="mxmlAdd"><description>Add a node to a tree.</description><argument
name="parent" direction="I"><type>mxml_node_t *</type><description>Parent node</description></argument>
<argument name="where" direction="I"><type>int</type><description>Where to add</description></argument>
<argument name="child" direction="I"><type>mxml_node_t *</type><description>Child node for where</description></argument>
<argument name="node" direction="I"><type>mxml_node_t *</type><description>Node to add</description></argument>
</function>
<function name="mxmlDelete"><description>Delete a node and all of its children.</description><argument
name="node" direction="I"><type>mxml_node_t *</type><description>Node</description></argument>
</function>
<function name="mxmlElementGetAttr"><returnvalue><description>Attribute value or NULL</description><type>const
char *</type></returnvalue>
<description>Get an attribute.</description><argument name="node"
direction="I"><type>mxml_node_t *</type><description>Element node</description></argument>
<argument name="name" direction="I"><type>const char *</type><description>Name of attribute</description></argument>
</function>
<function name="mxmlElementSetAttr"><description>Set an attribute.</description><argument
name="node" direction="I"><type>mxml_node_t *</type><description>Element node</description></argument>
<argument name="name" direction="I"><type>const char *</type><description>Name of attribute</description></argument>
<argument name="value" direction="I"><type>const char *</type><description>Attribute value</description></argument>
</function>
<function name="mxmlFindElement"><returnvalue><description>Element node or NULL</description><type>mxml_node_t
*</type></returnvalue>
<description>Find the named element.</description><argument name="node"
direction="I"><type>mxml_node_t *</type><description>Current node</description></argument>
<argument name="top" direction="I"><type>mxml_node_t *</type><description>Top node</description></argument>
<argument name="name" direction="I"><type>const char *</type><description>Element name or NULL for any</description></argument>
<argument name="attr" direction="I"><type>const char *</type><description>Attribute name, or NULL for none</description></argument>
<argument name="value" direction="I"><type>const char *</type><description>Attribute value, or NULL for any</description></argument>
<argument name="descend" direction="I"><type>int</type><description>Descend into tree?</description></argument>
</function>
<function name="mxmlLoadFile"><returnvalue><description>First node</description><type>mxml_node_t
*</type></returnvalue>
<description>Load a file into an XML node tree.</description><argument
name="top" direction="I"><type>mxml_node_t *</type><description>Top node</description></argument>
<argument name="fp" direction="I"><type>FILE *</type><description>File to read from</description></argument>
<argument name="(*cb)(mxml_node_t *)" direction="I"><type>mxml_type_t</type><description>Callback function</description></argument>
</function>
<function name="mxmlNewElement"><returnvalue><description>New node</description><type>mxml_node_t
*</type></returnvalue>
<description>Create a new element node.</description><argument
name="parent" direction="I"><type>mxml_node_t *</type><description>Parent node</description></argument>
<argument name="name" direction="I"><type>const char *</type><description>Name of element</description></argument>
</function>
<function name="mxmlNewInteger"><returnvalue><description>New node</description><type>mxml_node_t
*</type></returnvalue>
<description>Create a new integer node.</description><argument
name="parent" direction="I"><type>mxml_node_t *</type><description>Parent node</description></argument>
<argument name="integer" direction="I"><type>int</type><description>Integer value</description></argument>
</function>
<function name="mxmlNewOpaque"><returnvalue><description>New node</description><type>mxml_node_t
*</type></returnvalue>
<description>Create a new opaque string.</description><argument
name="parent" direction="I"><type>mxml_node_t *</type><description>Parent node</description></argument>
<argument name="opaque" direction="I"><type>const char *</type><description>Opaque string</description></argument>
</function>
<function name="mxmlNewReal"><returnvalue><description>New node</description><type>mxml_node_t
*</type></returnvalue>
<description>Create a new real number node.</description><argument
name="parent" direction="I"><type>mxml_node_t *</type><description>Parent node</description></argument>
<argument name="real" direction="I"><type>double</type><description>Real number value</description></argument>
</function>
<function name="mxmlNewText"><returnvalue><description>New node</description><type>mxml_node_t
*</type></returnvalue>
<description>Create a new text fragment node.</description><argument
name="parent" direction="I"><type>mxml_node_t *</type><description>Parent node</description></argument>
<argument name="whitespace" direction="I"><type>int</type><description>Leading whitespace?</description></argument>
<argument name="string" direction="I"><type>const char *</type><description>String</description></argument>
</function>
<function name="mxmlRemove"><description>Remove a node from its parent.</description><argument
name="node" direction="I"><type>mxml_node_t *</type><description>Node to remove</description></argument>
</function>
<function name="mxmlSaveFile"><returnvalue><description>0 on success, -1 on error</description><type>int</type></returnvalue>
<description>Save an XML tree to a file.</description><argument
name="node" direction="I"><type>mxml_node_t *</type><description>Node to write</description></argument>
<argument name="fp" direction="I"><type>FILE *</type><description>File to write to</description></argument>
<argument name="(*cb)(mxml_node_t *int)" direction="I"><type>int</type><description>Whitespace callback</description></argument>
</function>
<function name="mxmlWalkNext"><returnvalue><description>Next node or NULL</description><type>mxml_node_t
*</type></returnvalue>
<description>Walk to the next logical node in the tree.</description><argument
name="node" direction="I"><type>mxml_node_t *</type><description>Current node</description></argument>
<argument name="top" direction="I"><type>mxml_node_t *</type><description>Top node</description></argument>
<argument name="descend" direction="I"><type>int</type><description>Descend into tree?</description></argument>
</function>
<function name="mxmlWalkPrev"><returnvalue><description>Previous node or NULL</description><type>mxml_node_t
*</type></returnvalue>
<description>Walk to the previous logical node in the tree.</description><argument
name="node" direction="I"><type>mxml_node_t *</type><description>Current node</description></argument>
<argument name="top" direction="I"><type>mxml_node_t *</type><description>Top node</description></argument>
<argument name="descend" direction="I"><type>int</type><description>Descend into tree?</description></argument>
</function>
<struct name="mxml_attr_s"><description>Attribute Value</description><variable
name="name"><type>char *</type><description>Attribute name</description></variable>
<variable name="value"><type>char *</type><description>Attribute value</description></variable>
</struct>
<typedef name="mxml_attr_t"><description>Attribute Value</description><type>struct
mxml_attr_s</type></typedef>
<typedef name="mxml_element_t"><description>Element Value</description><type>struct
mxml_value_s</type></typedef>
<struct name="mxml_node_s"><description>Node</description><variable
name="child"><type>mxml_node_t *</type><description>First child node</description></variable>
<variable name="last_child"><type>mxml_node_t *</type><description>Last child node</description></variable>
<variable name="next"><type>mxml_node_t *</type><description>Next node under same parent</description></variable>
<variable name="parent"><type>mxml_node_t *</type><description>Parent node</description></variable>
<variable name="prev"><type>mxml_node_t *</type><description>Previous node under same parent</description></variable>
<variable name="type"><type>mxml_type_t</type><description>Node type</description></variable>
<variable name="value"><type>mxml_value_t</type><description>Node value</description></variable>
</struct>
<struct name="mxml_text_s"><description>Text Value</description><variable
name="string"><type>char *</type><description>Fragment string</description></variable>
<variable name="whitespace"><type>int</type><description>Leading whitespace?</description></variable>
</struct>
<typedef name="mxml_text_t"><description>Text Value</description><type>struct
mxml_text_s</type></typedef>
<enumeration name="mxml_type_e"><description>Node Type</description><constant
name="MXML_ELEMENT"><description>XML element with attributes</description></constant>
<constant name="MXML_INTEGER"><description>Integer value</description></constant>
<constant name="MXML_OPAQUE"><description>Opaque string</description></constant>
<constant name="MXML_REAL"><description>Real value</description></constant>
<constant name="MXML_TEXT"><description>Text fragment</description></constant>
</enumeration>
<typedef name="mxml_type_t"><description>Node Type</description><type>enum
mxml_type_e</type></typedef>
<struct name="mxml_value_s"><description>Element Value</description><variable
name="attrs"><type>mxml_attr_t *</type><description>Attributes</description></variable>
<variable name="name"><type>char *</type><description>Name of element</description></variable>
<variable name="num_attrs"><type>int</type><description>Number of attributes</description></variable>
</struct>
<typedef name="mxml_value_t"><description>Node Value</description><type>union
mxml_value_u</type></typedef>
<union name="mxml_value_u"><description>Node Value</description><variable
name="element"><type>mxml_element_t</type><description>Element</description></variable>
<variable name="integer"><type>int</type><description>Integer number</description></variable>
<variable name="opaque"><type>char *</type><description>Opaque string</description></variable>
<variable name="real"><type>double</type><description>Real number</description></variable>
<variable name="text"><type>mxml_text_t</type><description>Text fragment</description></variable>
</union>
